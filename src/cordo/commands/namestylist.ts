/* eslint-disable no-labels */
import axios from 'axios'
import { ButtonStyle, CommandInteraction, ComponentType, ReplyableCommandInteraction } from 'cordo'
import { TudeBot } from '../..'


const questions = [
  { id: 'cereal', text: 'What is the correct order?', options: [ 'Cereal, Milk, Spoon', 'Milk, Cereal, Spoon', 'Spoon, Cereal, Milk', 'Cereal, Spoon, Bowl' ] },
  { id: 'pizza', text: 'What is your favourite pizza topping?', options: [ 'Cheese', 'Pork', 'Vegetables', 'Pineapple' ] },
  { id: 'lose', text: 'What do you lose the most often?', options: [ 'Keys', 'Phone', 'Wallet', 'Will to live' ] },
  { id: 'animal', text: 'What is the best animal?', options: [ 'Cat', 'Dog', 'Turtle', 'Fish', 'Broccoli' ] },
  { id: 'color', text: 'Your favourite color?', options: [ 'Red', 'Green', 'Blue', 'Yellow' ] },
  { id: 'sport', text: 'Best sport?', options: [ 'Soccer / Football', 'Basketball', 'Swimming', 'Skiing' ] },
  { id: 'icecream', text: 'Best kind of ice cream?', options: [ 'Vanilla', 'Chocolate', 'Strawberry', 'The blue one', 'Something with alcohol' ] }
]

export default function (i: ReplyableCommandInteraction) {
  let finished = false
  let type = 'surprise'
  const typeTexts = {
    small: 'Small changes, noted.',
    big: 'Bigger adjustments while keeping elements of your current name... Okay!',
    new: 'Something very new, I\'m excited to give you a complete make-over!',
    surprise: 'A surprise! I am exited!'
  }

  const answers = {}
  // DO NOT CHANGE THE ORDER OF OPTIONS HERE WITHOUT CHANGING THE GENERATOR CODE BELOW!
  const quests = JSON.parse(JSON.stringify(questions)).sort(() => Math.random() - 0.5)

  i
    .replyInteractive({
      title: 'Hol√°!',
      description: 'I am the name stylist. Are you looking for a fresh, new style?',
      components: [
        {
          type: ComponentType.BUTTON,
          style: ButtonStyle.SUCCESS,
          custom_id: 'start',
          label: 'Oh yes!'
        },
        {
          type: ComponentType.BUTTON,
          style: ButtonStyle.SECONDARY,
          custom_id: 'cancel',
          label: 'Naah thanks'
        }
      ]
    })
    .withTimeout(60e3, (j) => {
      if (finished) return
      j.edit({
        description: 'No answer? Okay well I guess you\'re not interested any more... Just hit me up again if you change your mind!',
        components: []
      })
    }, { onInteraction: 'restartTimeout' }
    )
    .on('cancel', h => h.edit({
      description: 'Okie dokie! If you ever change your mind, hit me up!',
      components: []
    }))
    .on('start', h => h.edit({
      description: 'Okay alright... Tell me, are you looking for small adjustments or something new entirely?',
      components: [
        {
          type: ComponentType.BUTTON,
          style: ButtonStyle.SECONDARY,
          custom_id: 'page2_small',
          label: 'Small Adjustments'
        },
        {
          type: ComponentType.BUTTON,
          style: ButtonStyle.SECONDARY,
          custom_id: 'page2_big',
          label: 'Bigger Adjustments'
        },
        {
          type: ComponentType.BUTTON,
          style: ButtonStyle.SECONDARY,
          custom_id: 'page2_new',
          label: 'Something new'
        },
        {
          type: ComponentType.BUTTON,
          style: ButtonStyle.SECONDARY,
          custom_id: 'page2_surprise',
          label: 'Surprise me!'
        }
      ]
    }))
    .on('page2_$selection', (h) => {
      type = h.params.selection
      const question = quests[0]
      h.edit({
        description: typeTexts[type] + '\nI\'ll be asking you a few questions now to get a feel for what you like an what you dont. Let\'s get started...\n' + question.text,
        components: question.options.map((o, it) => ({
          type: ComponentType.BUTTON,
          style: ButtonStyle.SECONDARY,
          custom_id: 'page3_' + it.toString(),
          label: o
        }))
      })
    })
    .on('page3_$selection', (h) => {
      answers[quests[0].id] = h.params.selection
      const question = quests[1]
      h.edit({
        description: question.text,
        components: question.options.map((o, it) => ({
          type: ComponentType.BUTTON,
          style: ButtonStyle.SECONDARY,
          custom_id: 'page4_' + it.toString(),
          label: o
        }))
      })
    })
    .on('page4_$selection', (h) => {
      answers[quests[1].id] = h.params.selection
      const question = quests[2]
      h.edit({
        description: question.text,
        components: question.options.map((o, it) => ({
          type: ComponentType.BUTTON,
          style: ButtonStyle.SECONDARY,
          custom_id: 'page5_' + it.toString(),
          label: o
        }))
      })
    })
    .on('page5_$selection', (h) => {
      answers[quests[2].id] = h.params.selection
      h.edit({
        description: 'Okay alright, I think I have enough information to give you a glowing new look! Are you ready?',
        components: [
          {
            type: ComponentType.BUTTON,
            style: ButtonStyle.SUCCESS,
            custom_id: 'finish',
            label: 'I am ready!'
          }
        ]
      })
    })
    .on('finish', async (h) => {
      finished = true
      // const orgName = h.member.nick || h.user.username
      const orgName = h.user.username
      const name = (await generateName(orgName, type, answers, i)).substr(0, 32) || 'json derulo'
      const guild = await TudeBot.guilds.fetch(i.guild_id)
      const member = await guild.members.fetch(i.user.id)
      member.setNickname(name)
      h.edit({
        description: `Viol√°! There we go, here is your new name: \`${name}\`\nDo you like it? If not you can always come back again and get a new make-over!`,
        components: []
      })
    })

  return true
}

async function generateName(orgName: string, type: string, answers: Record<string, string>, i: CommandInteraction): Promise<string> {
  if (type === 'surprise')
    type = ([ 'small', 'big', 'new' ])[~~(Math.random() * 3)]

  console.log(answers)

  if (type === 'small') {
    if (answers.animal && Math.random() < 0.7) {
      const emoji = ([ 'üò∏', 'üê∂', 'üê¢', 'üê†', 'ü•¶' ])[answers.animal]
      if (Math.random() < 0.5) return emoji + ' ' + orgName
      else return orgName.substr(0, 30) + ' ' + emoji
    }
    if (answers.lose === '3') {
      if (Math.random() < 0.2) orgName = switchFont(orgName, Math.floor(Math.random() * 4))
      if (Math.random() < 0.3) return `üòî ${orgName.toLocaleLowerCase().split('').join(' ').substr(0, 28)} üòî`
      else return `üòî ${orgName.toLocaleLowerCase().substr(0, 28)} üôè`
    }

    if (Math.random() < 0.1)
      orgName = orgName.toUpperCase()
    if (Math.random() < 0.1)
      orgName = orgName.toLowerCase()

    if (Math.random() < 0.3) {
      orgName = switchFont(orgName)
      if (Math.random() < 0.5) return orgName
    }

    const emojis = getEmojiPair()
    if (Math.random() < 0.5)
      return `${emojis[0]} ${orgName.substr(0, 28)} ${emojis[1]}`
    else
      return orgName.split('').join(emojis[0])
  }

  if (type === 'big') {
    const someNumber = Math.random() < 0.2 ? 0 : Math.random() < 0.3 ? 1 : Math.random()
    const emojis = getEmojiPair()
    if (answers.icecream === '3') return 'C0ckmaster 3000'
    if (Math.random() < 0.1) orgName = orgName.split('').reverse().join('')
    if (Math.random() < 0.3) orgName = orgName.split(/[aeiouAEIOU]/).join('')
    if (Math.random() < 0.3) orgName = orgName.split(' ').sort(() => Math.random() - 0.5).join(' ')
    if (Math.random() < 0.3) orgName = orgName.split('').map(c => Math.random() < someNumber ? c.toLowerCase() : c.toUpperCase()).join('')
    if (Math.random() < 0.3) orgName = orgName.split(orgName[~~(Math.random() * orgName.length)]).join(emojis[0])
    else if (Math.random() < 0.1) orgName = orgName.split('').map(c => switchFont(c)).join('')
    else if (Math.random() < 0.5) orgName = switchFont(orgName)
    if (Math.random() < 0.1) orgName = orgName.split(orgName[~~(Math.random() * orgName.length)]).join(emojis[1])

    if (Math.random() < 0.2) return generateName(orgName, 'small', answers, i)
    return orgName
  }

  if (type === 'new') {
    if (Math.random() < 0.3) {
      const anskeys = Object.keys(answers)
      const anskey = anskeys[~~(Math.random() * anskeys.length)]
      const ansval = questions.find(q => q.id === anskey).options[answers[anskey]]
      return generateName(ansval, 'big', answers, i)
    }

    if (Math.random() < 0.1) {
      const guild = await TudeBot.guilds.fetch(i.guild_id)
      const members = guild.members.cache.array()
      const name = members[~~(Math.random() * members.length)]
      return generateName(name.user.username, 'big', answers, i)
    }

    const url = Math.random() < 0.5
      ? 'https://raw.githubusercontent.com/duyet/bruteforce-database/master/usernames.txt'
      : 'https://raw.githubusercontent.com/jeanphorn/wordlist/master/usernames.txt'

    const { data: list } = await axios.get(url, { validateStatus: null })
    if (!list?.length) return generateName('json derulo', 'big', answers, i)
    const lines: string[] = list.split('\n')
    const line = lines[~~(Math.random() * lines.length)]
    return generateName(line, 'big', answers, i)
  }

  return type + ' ' + JSON.stringify(answers)
}

function getEmojiPair(): [ string, string ] {
  const emojis = 'üëÖ üëÑ üëÅÔ∏è üåµ üçÑ üíê üê≥ üêã üêç üêå ü¶Ü üê¶ ‚ö° ‚ú® üî• ü™ê üí´ ‚òÄÔ∏è üåä üí¶ üåú üçí üçâ ü•• üçï üçî üçø üç¨ üóø üèñÔ∏è üóº üöÄ üí∏ üíª ‚õèÔ∏è üíé üîÆ üó°Ô∏è ‚öîÔ∏è üõ°Ô∏è üéÅ ‚ù§Ô∏è üß° üíõ üíö üíô üíú üñ§ ü§é ü§ç üíñ ‚ö†Ô∏è ‚ôªÔ∏è'.split(' ')
  const id = Math.floor(Math.random() * (emojis.length - 1))
  return [ emojis[id], emojis[id + 1] ].sort(() => Math.random() - 0.5) as [string, string]
}

function switchFont(text: string, font?: number) {
  const base = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  const fonts = [
    /*  0 */ 'ùîû ùîü ùî† ùî° ùî¢ ùî£ ùî§ ùî• ùî¶ ùîß ùî® ùî© ùî™ ùî´ ùî¨ ùî≠ ùîÆ ùîØ ùî∞ ùî± ùî≤ ùî≥ ùî¥ ùîµ ùî∂ ùî∑ ùîÑ ùîÖ ‚Ñ≠ ùîá ùîà ùîâ ùîä ‚Ñå ‚Ñë ùîç ùîé ùîè ùîê ùîë ùîí ùîì ùîî ‚Ñú ùîñ ùîó ùîò ùîô ùîö ùîõ ùîú ‚Ñ® 0 1 2 3 4 5 6 7 8 9'.split(' '),
    /*  1 */ 'ùñÜ ùñá ùñà ùñâ ùñä ùñã ùñå ùñç ùñé ùñè ùñê ùñë ùñí ùñì ùñî ùñï ùññ ùñó ùñò ùñô ùñö ùñõ ùñú ùñù ùñû ùñü ùï¨ ùï≠ ùïÆ ùïØ ùï∞ ùï± ùï≤ ùï≥ ùï¥ ùïµ ùï∂ ùï∑ ùï∏ ùïπ ùï∫ ùïª ùïº ùïΩ ùïæ ùïø ùñÄ ùñÅ ùñÇ ùñÉ ùñÑ ùñÖ 0 1 2 3 4 5 6 7 8 9'.split(' '),
    /*  2 */ 'ùì™ ùì´ ùì¨ ùì≠ ùìÆ ùìØ ùì∞ ùì± ùì≤ ùì≥ ùì¥ ùìµ ùì∂ ùì∑ ùì∏ ùìπ ùì∫ ùìª ùìº ùìΩ ùìæ ùìø ùîÄ ùîÅ ùîÇ ùîÉ ùìê ùìë ùìí ùìì ùìî ùìï ùìñ ùìó ùìò ùìô ùìö ùìõ ùìú ùìù ùìû ùìü ùì† ùì° ùì¢ ùì£ ùì§ ùì• ùì¶ ùìß ùì® ùì© 0 1 2 3 4 5 6 7 8 9'.split(' '),
    /*  3 */ 'ùïí ùïì ùïî ùïï ùïñ ùïó ùïò ùïô ùïö ùïõ ùïú ùïù ùïû ùïü ùï† ùï° ùï¢ ùï£ ùï§ ùï• ùï¶ ùïß ùï® ùï© ùï™ ùï´ ùî∏ ùîπ ‚ÑÇ ùîª ùîº ùîΩ ùîæ ‚Ñç ùïÄ ùïÅ ùïÇ ùïÉ ùïÑ ‚Ñï ùïÜ ‚Ñô ‚Ñö ‚Ñù ùïä ùïã ùïå ùïç ùïé ùïè ùïê ‚Ñ§ ùüò ùüô ùüö ùüõ ùüú ùüù ùüû ùüü ùü† ùü°'.split(' '),
    /*  4 */ 'ùí∂ ùí∑ ùí∏ ùíπ ùëí ùíª ùëî ùíΩ ùíæ ùíø ùìÄ ùìÅ ùìÇ ùìÉ ùëú ùìÖ ùìÜ ùìá ùìà ùìâ ùìä ùìã ùìå ùìç ùìé ùìè ùíú ùêµ ùíû ùíü ùê∏ ùêπ ùí¢ ùêª ùêº ùí• ùí¶ ùêø ùëÄ ùí© ùí™ ùí´ ùí¨ ùëÖ ùíÆ ùíØ ùí∞ ùí± ùí≤ ùí≥ ùí¥ ùíµ ùü¢ ùü£ ùü§ ùü• ùü¶ ùüß ùü® ùü© ùü™ ùü´'.split(' '),
    /*  5 */ 'ùîû –≤ ·ëï Ôº§ ·∫∏ ·ñ¥ ‚ìñ ùìó ∆ó ùíø ùì¥ ùìõ ùìÇ ‚ìù „Ññ ∆§ q —è ‚ì¢ t ·ëå ùêØ ·óØ ùï© ùê≤ ùì© ùîû ùïì ‚ÑÇ ƒê ·µâ Ôº¶ ùî§ –Ω Ôº© ◊ü ùì¥ ‚ìÅ ùìú ùêß ùê® ‚ìÖ ùîÆ ÔΩí ‚ì¢ ≈§ Ôºµ ùêØ ùîÄ Ôº∏  ∏ ùêô Ôºê ‚ûÄ ‚ûÅ ‚ù∏ ‚ùπ ‚ûÑ ‚ùª ‚ùº ‚ûá ‚ùæ'.split(' '),
    /*  6 */ 'ÔΩÅ ÔΩÇ ÔΩÉ ÔΩÑ ÔΩÖ ÔΩÜ ÔΩá ÔΩà ÔΩâ ÔΩä ÔΩã ÔΩå ÔΩç ÔΩé ÔΩè ÔΩê ÔΩë ÔΩí ÔΩì ÔΩî ÔΩï ÔΩñ ÔΩó ÔΩò ÔΩô ÔΩö Ôº° Ôº¢ Ôº£ Ôº§ Ôº• Ôº¶ Ôºß Ôº® Ôº© Ôº™ Ôº´ Ôº¨ Ôº≠ ÔºÆ ÔºØ Ôº∞ Ôº± Ôº≤ Ôº≥ Ôº¥ Ôºµ Ôº∂ Ôº∑ Ôº∏ Ôºπ Ôº∫ Ôºê Ôºë Ôºí Ôºì Ôºî Ôºï Ôºñ Ôºó Ôºò Ôºô'.split(' '),
    /*  7 */ 'üÖ∞ üÖ± üÖ≤ üÖ≥ üÖ¥ üÖµ üÖ∂ üÖ∑ üÖ∏ üÖπ üÖ∫ üÖª üÖº üÖΩ üÖæ üÖø üÜÄ üÜÅ üÜÇ üÜÉ üÜÑ üÜÖ üÜÜ üÜá üÜà üÜâ üÖ∞ üÖ± üÖ≤ üÖ≥ üÖ¥ üÖµ üÖ∂ üÖ∑ üÖ∏ üÖπ üÖ∫ üÖª üÖº üÖΩ üÖæ üÖø üÜÄ üÜÅ üÜÇ üÜÉ üÜÑ üÜÖ üÜÜ üÜá üÜà üÜâ 0 1 2 3 4 5 6 7 8 9'.split(' '),
    /*  8 */ '‚Çê b c d ‚Çë f g ‚Çï ·µ¢ ‚±º ‚Çñ ‚Çó ‚Çò ‚Çô ‚Çí ‚Çö q ·µ£ ‚Çõ ‚Çú ·µ§ ·µ• w ‚Çì y z ‚Çê B C D ‚Çë F G ‚Çï ·µ¢ ‚±º ‚Çñ ‚Çó ‚Çò ‚Çô ‚Çí ‚Çö Q ·µ£ ‚Çõ ‚Çú ·µ§ ·µ• W ‚Çì Y Z ‚ÇÄ ‚ÇÅ ‚ÇÇ ‚ÇÉ ‚ÇÑ ‚ÇÖ ‚ÇÜ ‚Çá ‚Çà ‚Çâ'.split(' '),
    /*  9 */ '·µÉ ·µá ·∂ú ·µà ·µâ ·∂† ·µç  ∞ ‚Å±  ≤ ·µè À° ·µê ‚Åø ·µí ·µñ q  ≥ À¢ ·µó ·µò ·µõ  ∑ À£  ∏ ·∂ª ·¥¨ ·¥Æ ·∂ú ·¥∞ ·¥± ·∂† ·¥≥ ·¥¥ ·¥µ ·¥∂ ·¥∑ ·¥∏ ·¥π ·¥∫ ·¥º ·¥æ Q ·¥ø À¢ ·µÄ ·µÅ ‚±Ω ·µÇ À£  ∏ ·∂ª ‚Å∞ ¬π ¬≤ ¬≥ ‚Å¥ ‚Åµ ‚Å∂ ‚Å∑ ‚Å∏ ‚Åπ'.split(' '),
    /* 10 */ '‚ìê ‚ìë ‚ìí ‚ìì ‚ìî ‚ìï ‚ìñ ‚ìó ‚ìò ‚ìô ‚ìö ‚ìõ ‚ìú ‚ìù ‚ìû ‚ìü ‚ì† ‚ì° ‚ì¢ ‚ì£ ‚ì§ ‚ì• ‚ì¶ ‚ìß ‚ì® ‚ì© ‚í∂ ‚í∑ ‚í∏ ‚íπ ‚í∫ ‚íª ‚íº ‚íΩ ‚íæ ‚íø ‚ìÄ ‚ìÅ ‚ìÇ ‚ìÉ ‚ìÑ ‚ìÖ ‚ìÜ ‚ìá ‚ìà ‚ìâ ‚ìä ‚ìã ‚ìå ‚ìç ‚ìé ‚ìè ‚ì™ ‚ë† ‚ë° ‚ë¢ ‚ë£ ‚ë§ ‚ë• ‚ë¶ ‚ëß ‚ë®'.split(' '),
    /* 11 */ '‡∏Ñ ‡πñ ¬¢ ‡ªì ƒì f ‡∫á h i ‡∏ß k l ‡πì ‡∫ñ ‡ªê p ‡πë r ≈û t ‡∏ô ‡∏á ‡∫ü x ‡∏Ø ‡∫ä ‡∏Ñ ‡πñ ¬¢ ‡ªì ƒì f ‡∫á h i ‡∏ß k l ‡πì ‡∫ñ ‡ªê p ‡πë r ≈û t ‡∏ô ‡∏á ‡∫ü x ‡∏Ø ‡∫ä 0 1 2 3 4 5 6 7 8 9'.split(' '),
    /* 12 */ 'ùêö ùêõ ùêú ùêù ùêû ùêü ùê† ùê° ùê¢ ùê£ ùê§ ùê• ùê¶ ùêß ùê® ùê© ùê™ ùê´ ùê¨ ùê≠ ùêÆ ùêØ ùê∞ ùê± ùê≤ ùê≥ ùêÄ ùêÅ ùêÇ ùêÉ ùêÑ ùêÖ ùêÜ ùêá ùêà ùêâ ùêä ùêã ùêå ùêç ùêé ùêè ùêê ùêë ùêí ùêì ùêî ùêï ùêñ ùêó ùêò ùêô ùüé ùüè ùüê ùüë ùüí ùüì ùüî ùüï ùüñ ùüó'.split(' '),
    /* 13 */ 'ùóÆ ùóØ ùó∞ ùó± ùó≤ ùó≥ ùó¥ ùóµ ùó∂ ùó∑ ùó∏ ùóπ ùó∫ ùóª ùóº ùóΩ ùóæ ùóø ùòÄ ùòÅ ùòÇ ùòÉ ùòÑ ùòÖ ùòÜ ùòá ùóî ùóï ùóñ ùóó ùóò ùóô ùóö ùóõ ùóú ùóù ùóû ùóü ùó† ùó° ùó¢ ùó£ ùó§ ùó• ùó¶ ùóß ùó® ùó© ùó™ ùó´ ùó¨ ùó≠ ùü¨ ùü≠ ùüÆ ùüØ ùü∞ ùü± ùü≤ ùü≥ ùü¥ ùüµ'.split(' '),
    /* 14 */ 'ùò¢ ùò£ ùò§ ùò• ùò¶ ùòß ùò® ùò© ùò™ ùò´ ùò¨ ùò≠ ùòÆ ùòØ ùò∞ ùò± ùò≤ ùò≥ ùò¥ ùòµ ùò∂ ùò∑ ùò∏ ùòπ ùò∫ ùòª ùòà ùòâ ùòä ùòã ùòå ùòç ùòé ùòè ùòê ùòë ùòí ùòì ùòî ùòï ùòñ ùòó ùòò ùòô ùòö ùòõ ùòú ùòù ùòû ùòü ùò† ùò° 0 1 2 3 4 5 6 7 8 9'.split(' '),
    /* 15 */ 'ùôñ ùôó ùôò ùôô ùôö ùôõ ùôú ùôù ùôû ùôü ùô† ùô° ùô¢ ùô£ ùô§ ùô• ùô¶ ùôß ùô® ùô© ùô™ ùô´ ùô¨ ùô≠ ùôÆ ùôØ ùòº ùòΩ ùòæ ùòø ùôÄ ùôÅ ùôÇ ùôÉ ùôÑ ùôÖ ùôÜ ùôá ùôà ùôâ ùôä ùôã ùôå ùôç ùôé ùôè ùôê ùôë ùôí ùôì ùôî ùôï 0 1 2 3 4 5 6 7 8 9'.split(' '),
    /* 16 */ 'ùöä ùöã ùöå ùöç ùöé ùöè ùöê ùöë ùöí ùöì ùöî ùöï ùöñ ùöó ùöò ùöô ùöö ùöõ ùöú ùöù ùöû ùöü ùö† ùö° ùö¢ ùö£ ùô∞ ùô± ùô≤ ùô≥ ùô¥ ùôµ ùô∂ ùô∑ ùô∏ ùôπ ùô∫ ùôª ùôº ùôΩ ùôæ ùôø ùöÄ ùöÅ ùöÇ ùöÉ ùöÑ ùöÖ ùöÜ ùöá ùöà ùöâ ùü∂ ùü∑ ùü∏ ùüπ ùü∫ ùüª ùüº ùüΩ ùüæ ùüø'.split(' '),
    /* 17 */ 'ÂçÇ ‰πÉ Âåö ·ó™ ‰πá ÂçÉ ·é∂ ÂçÑ ‰∏® Ôæå “ú „Ñ• Áà™ Âá† „Ññ Âç© …ä Â∞∫ ‰∏Ç „Ñí „Ñ© ·êØ Â±± ‰πÇ „Ñö ‰πô ÂçÇ ‰πÉ Âåö ·ó™ ‰πá ÂçÉ ·é∂ ÂçÑ ‰∏® Ôæå “ú „Ñ• Áà™ Âá† „Ññ Âç© …ä Â∞∫ ‰∏Ç „Ñí „Ñ© ·êØ Â±± ‰πÇ „Ñö ‰πô 0 1 2 3 4 5 6 7 8 9'.split(' '),
    /* 18 */ '·ó© ·ó∑ ·ëï ·ó™ E ·ñ¥ G ·ïº I ·íç K ·í™ ·ó∞ ·ëé O ·ë≠ ·ë´ ·ñá ·îï T ·ëå ·êØ ·óØ ·ô≠ Y ·òî ·ó© ·ó∑ ·ëï ·ó™ E ·ñ¥ G ·ïº I ·íç K ·í™ ·ó∞ ·ëé O ·ë≠ ·ë´ ·ñá ·îï T ·ëå ·êØ ·óØ ·ô≠ Y ·òî 0 1 2 3 4 5 6 7 8 9'.split(' ')
  ]
  if (font === undefined)
    font = Math.floor(Math.random() * fonts.length)

  console.log(text, text.split('').map(char => base.indexOf(char)), text.split('').map(char => base.indexOf(char)).map(index => (index === -1) ? text[index] : fonts[font][index]).join(''))

  return text
    .split('')
    .map(char => base.indexOf(char))
    .map(index => (index === -1) ? text[index] : fonts[font][index])
    .join('')
}
